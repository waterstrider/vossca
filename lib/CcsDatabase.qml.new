import QtQuick 2.0
import Database 0.1

Item {
    property var dbList:({})
    property var ccsTmData
    property string sessionName
    property var sessionStartTime
    property var sessionEndTime
    property alias loaded: ccsTmData.loaded

    id: container

    Database {
        id: ccsDbList
        connectionName: "ccsDbList"
        type: "QMYSQL"
        databaseName: "INFORMATION_SCHEMA"
        userName: "ccsuser"
        password: "leiden1"
        SqlModel {
            id: sqlDbList
            query: "SHOW DATABASES LIKE '2%'"
            onCountChanged: {
                fetchDatabaseList();
            }
        }
    }

    onSessionNameChanged: {
        container.loaded = false;
        ccsTmData = comCcsTmData.createObject(container,{"databaseName": sessionName});
    }

    Component {
        id: comCcsTmData
        Database {
            property bool loaded: false
            property int currentIndex: 0
            property alias rowCount: sqlTmData.count
            property double startTime: -1
            property double endTime: -1
            connectionName: 'ccsTmData'
            type: "QMYSQL"
            userName: "ccsuser"
            password: "leiden1"
            SqlModel {
                id: sqlTmData
                query: "SELECT * FROM " + databaseName + ".tm_param_af ORDER BY receivedTime"
                onCountChanged: {
                    currentIndex = 0;
                    if(count > 0) {
                        var row = sqlTmData.get(0);
                        container.convertTime(row);
                        startTime = row["receivedTime"];
                        row = sqlTmData.get(count-1);
                        container.convertTime(row);
                        endTime = row["receivedTime"];
                        console.log("Count = " + rowCount);
                    }
                    container.loaded = true;
                }
            }
        }
    }

    function getTmData(time) {
        if(!ccsTmData.loaded) return null;

        var result = {};
        for(var i = 0; i < ccsTmData.rowCount; i++) {
            var row = sqlTmData.get(i);
            convertTime(row);
            if(row["receivedTime"] > time)
                break;
            else {
                result[row["name"]] = row;
                console.log(row["name"]);
            }
        }

        ccsTmData.currentIndex = i;
        return result;
    }

    function getTmHistory(paramName) {
        if(!ccsTmData.loaded) return null;

        var result = [];
        for(var i = 0; i < ccsTmData.rowCount; i++) {
            var row = sqlTmData.get(i);
            if(row["name"] == paramName) {
                convertTime(row);
                result.push(row);
            }
        }
        return result;
    }

    function peekNextTmPacket() {
        if(!ccsTmData.loaded) return null;

        if(ccsTmData.currentIndex >=0 && ccsTmData.currentIndex < ccsTmData.rowCount) {
            var row = sqlTmData.get(ccsTmData.currentIndex);
            convertTime(row);
            return row;
        } else
            return null;
    }

    function skipNextTmPacket() {
        if(ccsTmData.currentIndex < ccsTmData.rowCount)
            ccsTmData.currentIndex++;
    }


    function fetchDatabaseList() {
        var num = sqlDbList.count;
        var list = ({});
        for(var i = 0; i < num; i++) {
            var dbName = sqlDbList.get(i)["Database (2%)"];
            var a = dbName.replace("t","_").split("_");
            var yy = Number(a[0]);
            var mm = Number(a[1])-1;
            var dd = Number(a[2]);
            var date = new Date(Date.UTC(yy,mm,dd,a[3],a[4],a[5]));
            var dbInfo = {"name":dbName, "date":date, "user":a[6],
                "workstation":a[7],"sessionType":a[8]};
            if([yy,mm,dd] in list)
                list[[yy,mm,dd]].push(dbInfo);
            else
                list[[yy,mm,dd]] = [dbInfo];
        }
        container.dbList = list;
    }

    function convertTime(row) {
        var strGenTime = "" + row["generationTime"];
        var strRecTime = "" + row["receivedTime"];
        row["generationTime"] = Number(strGenTime.substr(0,strGenTime.length-6));
        row["receivedTime"] = Number(strRecTime.substr(0,strRecTime.length-6));
    }

}

