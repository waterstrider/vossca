import QtQuick 2.0

Item {
    signal scrolledTo(var time)
    property bool enabled: false
    property double currentTime: 0.0
    property double startTime: 0.0
    property double endTime: 100
    property color color
    property bool _dragging: false
    property double _draggingX: 0.0

    height: 50

    WidgetLabelUI {
        id: labelStartTime
        anchors.left: parent.left
        y: 15
        width: 100
        horizontalAlignment: Text.AlignHCenter
        text: enabled?(new Date(startTime)).toISOString().substr(11,8):"--:--:--"
    }

    WidgetLabelUI {
        id: labelEndTime
        anchors.right: parent.right
        y: 15
        width: 100
        horizontalAlignment: Text.AlignHCenter
        text: enabled?(new Date(endTime)).toISOString().substr(11,8):"--:--:--"
    }

    Item {
        id: bar
        x: 100; y: 7
        height: 20; width: parent.width - 200

        Rectangle {
            height:2; width: parent.width
            anchors.bottom: parent.bottom
            border.color: color
        }

        Image {
            id: imageMarker
            source: "images/WidgetPlaybackProgress.png"
            y: 5
            x: -width/2 + _dragging?_draggingX:(bar.width * Math.min(1.0, Math.max(0.0,(currentTime - startTime)/(endTime - startTime))))
            WidgetLabelUI {
                id: labelCurrentTime
                x: -width/2+5; y: -20
                horizontalAlignment: Text.AlignHCenter
                text: (currentTime > 0)?(new Date(currentTime)).toISOString().substr(11,8):""
            }
        }

        MouseArea {
            anchors.fill: parent
            onClicked: {
                if(enabled) {
                    var newTime = startTime + (mouseX/width)*(endTime - startTime)
                    scrolledTo(newTime)
                    console.log("Clicked at " + mouseX + " Time = " + newTime);
                }
            }
            onPressAndHold: {
                if(enabled && (mouse.buttons & Qt.LeftButton)) {
                    _draggingX = mouseX;
                    _dragging = true;
                }
            }
            onPositionChanged: {
                if(enabled && _dragging) _draggingX = mouseX;
            }
            onReleased: {
                if(enabled && _dragging) {
                    var newTime = startTime + (mouseX/width)*(endTime - startTime)
                    scrolledTo(newTime)
                    console.log("Mouse released to " + mouseX + " Time = " + newTime);
                    _dragging = false;
                }
            }
            onCanceled: {
                if(enabled && _dragging) {
                    var newTime = startTime + (mouseX/width)*(endTime - startTime)
                    scrolledTo(newTime)
                    console.log("Mouse canceled at " + mouseX + " Time = " + newTime);
                    _dragging = false;
                }
            }
        }
    }
}
