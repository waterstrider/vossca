import QtQuick 2.0
import Database 0.1
import "JsLib.js" as JsLib

Item {
    id: container
    property var context
    property var paramDict: ({})

    property alias sessionName: ccsDatabase.databaseName
    property alias startTime: ccsDatabase.startTime
    property alias endTime: ccsDatabase.endTime
    property alias loaded: ccsDatabase.loaded

    property bool isPlaying: false
    property double currentTime: -1
    property double speed: 10.0

    Component.onCompleted: {
        console.log("HistTmModel loaded");
    }
    Component.onDestruction: {
        console.log("HistTmModel to be destructed")
    }

    function param(paramName) {
        if(!(paramName in paramDict)) {
            paramDict[paramName] = comTmParam.createObject(container, {"name":paramName});
        }
        return paramDict[paramName];
    }

    function paramHistory(paramName) {
        return ccsDatabase.getTmHistory(ParamName);
    }

    Component {
        id: comTmParam
        Item {
            property string name: ""
            property string engValue: ""
            property double rawValue: 0
        }
    }

    Timer {
        id: timer
        interval: 100
        running: false
        repeat: true
        onTriggered: {
            if(isPlaying) {
                currentTime += (timer.interval*speed);
                console.log(container.startTime + "," + currentTime + "," + container.endTime);
                while(true) {
                    var nextTmPacket = ccsDatabase.peekNextTmPacket();
                    if(!nextTmPacket) {
                        stop();
                        break;
                    }
                    if(nextTmPacket["receivedTime"] > currentTime) break;
                    updateParamPacket(nextTmPacket);
                    ccsDatabase.skipNextTmPacket();
                }
            }
        }
    }

    function play() {
         if(loaded && !isPlaying) {
            if(currentTime < 0) {
                currentTime = container.startTime;
                var result = ccsDatabase.getTmData(currentTime);
                updateParams(result);
            }
            isPlaying = true;
            timer.start();
        }
    }

    function scroll(newTime) {
        if(!loaded) return;

        if(newTime >= container.startTime && newTime <= container.endTime) {
            if(isPlaying) timer.stop();

            currentTime = newTime;
            var result = ccsDatabase.getTmData(currentTime);
            updateParams(result);

            if(isPlaying) timer.start();
        }
    }

    function pause() {
        timer.stop();
        isPlaying = false;
    }

    function stop() {
        timer.stop();
        isPlaying = false;
        currentTime = -1;
    }

    function updateParams(newParamData){
        for(var paramName in paramDict) {
            if(paramName in newParamData) {
                paramDict[paramName].rawValue = Number(newParamData[paramName]["rawValue"]);
                paramDict[paramName].engValue = newParamData[paramName]["engValue"];
            } else {
                paramDict[paramName].rawValue = 0;
                paramDict[paramName].engValue = "";
            }
        }
    }

    function updateParamPacket(paramPacket) {
        var paramName = paramPacket["name"];
        if(paramName in paramDict) {
            paramDict[paramName].rawValue = Number(paramPacket["rawValue"]);
            paramDict[paramName].engValue = paramPacket["engValue"];
        }
    }

    Database {
        id: ccsDatabase
        property bool loaded: false
        property int currentIndex: 0
        property alias rowCount: sqlTmData.count
        property double startTime: -1
        property double endTime: -1
        property var snapshots
        connectionName: Date.now()
        type: "QMYSQL"
        userName: "ccsuser"
        password: "leiden1"
        SqlModel {
            id: sqlTmData
            async: true
            query: "SELECT * FROM "+ccsDatabase.databaseName+".tm_param_af ORDER BY receivedTime"
            onDatabaseChanged: {
                console.log("Database changed: " + database);
            }

            onQueryChanged: {
                console.log("Query changed: " + query);
            }

            onParamsChanged: {
                console.log("Params changed" + params);
            }

            onUpdated: {
                console.log("Database: " + ccsDatabase.databaseName + " Count = " + count)
                if(!ccsDatabase.loaded && (count > 0)) {
                    ccsDatabase.currentIndex = 0;
                    var dbInfo = context.getDbInfo(sessionName);
                    if(dbInfo.snapshots.length <= 0) {
                        sqlTmData.first();
                        var row = sqlTmData.getCurrent();
                        convertTime(row);
                        ccsDatabase.startTime = row["receivedTime"];

                        sqlTmData.last();
                        row = sqlTmData.getCurrent();
                        convertTime(row);
                        ccsDatabase.endTime = row["receivedTime"];

                        dbInfo.startTime = ccsDatabase.startTime;
                        dbInfo.endTime = ccsDatabase.endTime;

                        console.log("Constructing indexer")
                        var incubator = compIndexer.incubateObject(null, {"sqlModel": sqlTmData,
                                                                       "snapshotInterval": context.snapshotInterval});
                        if (incubator.status != Component.Ready) {
                            incubator.onStatusChanged = function(status) {
                                if (status == Component.Ready) {
                                    console.log ("Object", incubator.object, "is now ready!");
                                    ccsDatabase.snapshots = incubator.object.snapshots;
                                    dbInfo.snapshots = ccsDatabase.snapshots;
                                    ccsDatabase.loaded = true;
                                    incubator.object.destroy();
                                }
                            }
                        } else {
                            console.log("Object", incubator.object, "is ready immediately!");
                            ccsDatabase.snapshots = incubator.object.snapshots;
                            dbInfo.snapshots = ccsDatabase.snapshots;
                            ccsDatabase.loaded = true;
                            incubator.object.destroy();
                        }
                    } else {
                        ccsDatabase.snapshots = dbInfo.snapshots;
                        ccsDatabase.startTime = dbInfo.startTime;
                        ccsDatabase.endTime = dbInfo.endTime;
                        ccsDatabase.loaded = true;
                    }

                }
            }

        }

        function getTmData(time) {
            if(!ccsDatabase.loaded) return null;

            var snapshotInterval = context.snapshotInterval;
            var snapshotIndex = Math.floor((time-ccsDatabase.startTime)/snapshotInterval);
            var result = ccsDatabase.snapshots[snapshotIndex];
            var rowIndex = result["rowIndex"];
            sqlTmData.seek(rowIndex);
            var row;
            do {
                row = sqlTmData.getCurrent();
                convertTime(row);
                if(row["receivedTime"] > time)
                    break;
                else
                    result[row["name"]] = row;
                rowIndex++;
            } while(sqlTmData.next());
            ccsDatabase.currentIndex = rowIndex;
            return result;
        }

        function getTmHistory(paramName) {
            if(!ccsDatabase.loaded) return null;

            var dbInfo = context.getDbInfo(sessionName);
            if(paramName in dbInfo.paramHistory)
                return dbInfo.paramHistory[paramName];
            else {
                var result = [];
                var row;
                sqlTmData.first();
                do {
                    row = sqlTmData.getCurrent();
                    if(row["name"] == paramName) {
                        convertTime(row);
                        result.push(row);
                   }
                } while(sqlTmData.next());
                dbInfo.paramHistory[paramName] = result;
                sqlTmData.peek(ccsDatabase.currentIndex);
                return result;
           }
        }

        function peekNextTmPacket() {
            if(!ccsDatabase.loaded) return null;

            return convertTime(sqlTmData.getCurrent());
        }

        function skipNextTmPacket() {
            if(sqlTmData.next())
                ccsDatabase.currentIndex++;
        }
    }
    function convertTime(row) {
        var strGenTime = "" + row["generationTime"];
        var strRecTime = "" + row["receivedTime"];
        row["generationTime"] = Number(strGenTime.substr(0,strGenTime.length-6));
        row["receivedTime"] = Number(strRecTime.substr(0,strRecTime.length-6));
    }

    Component {
        id: compIndexer
        Item {
            property var sqlModel
            property int snapshotInterval: 0
            property var snapshots

            Component.onCompleted: {
                if(snapshotInterval > 0)
                    performIndexing();
                else
                    console.log("snapshotInterval zero");
            }

            function performIndexing() {
                console.log("Start indexing");
                var s = [];

                sqlModel.first();
                var row = sqlModel.getCurrent();
                convertTime(row);
                var t = row["receivedTime"];

                var result = {};
                var resultCopy;
                var rowIndex = 0;
                do {
                    row = sqlModel.getCurrent();
                    convertTime(row);
                    if(row["receivedTime"] > t) {
                        resultCopy = JsLib.shallowCopy(result);
                        do {
                            s.push(resultCopy);
                            t += snapshotInterval;
                        } while(row["receivedTime"] > t);
                    }
                    result[row["name"]] = row;
                    result["rowIndex"] = rowIndex;
                    rowIndex++;
                } while(sqlModel.next());
                sqlModel.first();
                console.log("Num of records read = " + rowIndex);
                console.log("Snapshot length = " + s.length);
                snapshots = s;
            }
        }
    }
}

